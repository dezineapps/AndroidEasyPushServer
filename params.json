{"name":"JavocSoft Android Easy Push Server","body":"## Welcome to Android Easy Push Server Library.\r\nThis library is intented to make easy the usage of Google C2DM Push Notification system from a Java application. \r\n\r\n## Usage.\r\n\r\n### Registration with C2DM\r\n\r\nIs quite easy. First you must initialize de server by declaring some variables:\r\n\r\nSet your Google C2DM credentials. To obtain these credentials go to [Google C2DM Registration Page](http://code.google.com/intl/es-ES/android/c2dm/signup.html).\r\n\r\n```\r\nfinal String c2dm_account_sender=\"\";\r\nfinal String c2dm_account_sender_pwd=\"\";\r\n```\r\nSet the credentials file name and a password for it. This file will hold (encrypted, PBE) your credentials for Google C2DM.\r\n\r\n```\r\nfinal String c2dm_secure_store_pwd=\"password\";\r\nfinal String c2dm_account_credentials_file=\"c2dm_account_credentials.c2dm\";\r\n```\r\nSet also your server name, this info will be sent to Google C2DM when getting your server token.\r\n\r\n```\r\nfinal String c2dm_serverName=\"YourServerName\";\r\n```\r\nSet the file that will contain the obtained Google C2DM token for your server.\r\n\r\n```\r\nfinal String c2dm_token_file=\"c2dm_srv_token.c2dm\";\r\n```\r\n\r\nNow, to register your server with Google C2DM you only have to create a C2DMSrvClient object and call to a method:\r\n\r\n```\r\nprivate C2DMSrvClient c2dmClient=null;\r\nprivate String c2dmToken=null;\r\n\r\nc2dmClient=new C2DMSrvClient(c2dm_secure_store_pwd, c2dm_account_credentials_file, \r\n\t\t             c2dm_token_file, c2dm_account_sender, \r\n\t\t\t     c2dm_account_sender_pwd,c2dm_serverName);\r\ntry{\r\n    //Way 1: With token being saved in disk.\r\n    c2dmToken=c2dmClient.getServerAuthenticationToken(false, true, null);\r\n    logger.info(\"Server C2DM AUTH obtained token: \"+c2dmToken);\r\n} catch (C2DMClientGetAuthTokenException e) {\r\n    logger.error(\"ERROR Server C2DM AUTH obtain token process: \"+e.getMessage());\r\n}\r\n```\r\n\r\nThere are two ways of initialization related to how the token is managed:\r\n* Save the obtained token in disk (variable \"c2dm_token_file\")\r\n\r\n```\r\nc2dmToken=c2dmClient.getServerAuthenticationToken(false, true);\r\n```\r\n* Not saving the obtained token in disk.\r\n\r\nIn this case, the token is only saved in memory.\r\n\r\n```\r\nc2dmToken=c2dmClient.getServerAuthenticationToken(false, true);\r\n```\r\n\r\n\r\nIf all went ok, now your server is able to send push notification :)\r\n\r\n## Sending a PUSH\r\n\r\nFirst, we need to have some devices registered in our server to be able to send a message (see [JavocSoft AndroidEasyPushClient](https://github.com/javocsoft/AndroidEasyPushClient) to get a device registered with C2DM) . We also set a notification id for later ACK optional usage (statistics pourposes). It is possible also to send some rich media info, in this case, a URL.\r\n\r\n```\r\nfinal String notificationId=\"1\";\t\t\r\nString dev_reg_id=\"some_device_registration_id\";\r\nString[] devices={\"dev_reg_id1\",\"dev_reg_id2\"};\r\nString richMediaPushUrl=\"http://www.google.es\";\r\n```\r\n\r\nNow, to send the notification, there are two ways dependig of the initialization type:\r\n\r\n### With token saved on disk\r\n\r\n```\r\ntry {\r\n  C2DMOperationInfo result=c2dmClient.sendPush(devices, \"This is a push test from JavocSoft - AndroidEasyPushServer  \r\n                                             library.\",richMediaPushUrl,notificationId,true,false);\r\n  String[] pushSent=result.getC2DMSentPushNotifications();\r\n  for(String pushData:pushSent){\r\n\tSystem.out.println(\"PUSH Info: \"+pushData);\r\n  }\r\n} catch (C2DMClientGetAuthTokenException e) {\r\n\te.printStackTrace();\r\n} catch (C2DMClientPushException e) {\r\n\te.printStackTrace();\r\n}\r\n```\r\n\r\n### With token not saved on disk\r\n\r\n```\r\ntry {\r\n  String c2dmToken=c2dmClient.getServerAuthenticationToken(false, false);\r\n  C2DMOperationInfo result=c2dmClient.sendPush(c2dmToken, devices, \"This is a push test from JavocSoft -  \r\n                                             AndroidEasyPushServer library.\",\r\n                                             richMediaPushUrl,notificationId,true,false);\r\n  String[] pushSent=result.getC2DMSentPushNotifications();\r\n  for(String pushData:pushSent){\r\n\tSystem.out.println(\"PUSH Info: \"+pushData);\r\n  }\r\n} catch (C2DMClientGetAuthTokenException e) {\r\n\te.printStackTrace();\r\n} catch (C2DMClientPushException e) {\r\n\te.printStackTrace();\r\n}\r\n```\r\n\r\nAs you can see, in both cases the result of the operation is saved in a C2DMOperationInfo object.\r\n\r\n## Acknowledge of read sent PUSH Notification\r\n\r\nThis library also is prepared to receive ACKs from the client side (Android device) when the user opens a sent PUSH notification allowing in the server side statistics usage of this info.\r\n  ","tagline":"A library to allow the easy usage of Google C2DM service in the server side.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}